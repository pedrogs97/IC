# -*- coding: utf-8 -*-
"""Copy  03TicTac.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9qGY3VMLXE82d7vNpFiAbeJlP2GdIru

# Atividade 26/03/2020

No repositorio https://archive.ics.uci.edu/ml/ existem muitas bases de dados para Machine Learning.

A atividade é configurar uma MLP com keras tensorflow para resolver no minimo 2 problemas desta base de dados.
 - Não pode ser a "iris_dataset".
 - Não pode ter muitas bases escolhida por voces de forma repetida. (ou seja se aluno A escolheu o problema x e y, o aluno B deve evitar pegar o problema x e y)

## Extra

Utilize estatísticas se possível na base de dados, tente "desvendar o que ela significa" utilize não somente as informações no site como tambem visalize os dados.

# Alunos
 -  Aluno: \<nome aqui\>
"""

import pandas as pd
import numpy as np
from numpy import loadtxt
import tensorflow as tf
import matplotlib.pyplot as plt

def plotarResultados(resultado, titulo, ylabel, xlabel):
    plt.plot(resultado)
    plt.title(titulo)
    plt.ylabel(ylabel)
    plt.xlabel(xlabel)
    plt.show()

"""CATEGORIZANDO OS DADOS DE SAIDA"""

numpydados = loadtxt('tic-tac-toe.csv', delimiter=",")

Xtotal = numpydados[:,0:9] 
Ytotal = numpydados[:,9] 

Xfit = np.concatenate((numpydados[0:208, :9], numpydados[626:737, :9]), axis=0) 
Yfit = np.concatenate((numpydados[0:208, 9], numpydados[626:737, 9]), axis=0) 

Xeva = np.concatenate((numpydados[208:417, :9], numpydados[737:847, :9]), axis=0)  
Yeva = np.concatenate((numpydados[208:417, 9], numpydados[737:847, 9]), axis=0) 

Xbase = np.concatenate((numpydados[417:626, :9], numpydados[847:958, :9]), axis=0)   
Ybase = np.concatenate((numpydados[417:626, 9], numpydados[847:958, 9]), axis=0)  

print (len(Xbase))
print (len(Xeva))
print (len(Xfit))



# 1~208 + 627 ~ 737 -> Fit
# 209~417 + 737 ~ 847 -> Eva
# 418~626 + 848 ~ 958 -> basefit

model = tf.keras.Sequential([
    tf.keras.layers.Dense(12, input_dim=9, activation=tf.nn.sigmoid),
    tf.keras.layers.Dense(4, activation=tf.nn.sigmoid),
    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)
])

"""KERAS"""

model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.12),
              loss='binary_crossentropy',
              metrics=['accuracy'])

seqModel = model.fit(Xfit, Yfit, epochs=250) #Treinamento

listAcc = list(seqModel.history['accuracy'])
avgAcc = np.average(listAcc)

listLoss = list(seqModel.history['loss'])
avgLoss = np.average(listLoss)

print('Treinamento:\nAcerto médio: %.2f ' % (avgAcc*100))
print('Erro médio: %.2f ' % (avgLoss))


print('\n\nCom base de treinamento:')
loss, accuracy = model.evaluate(Xeva, Yeva)
print('Acerto: %.2f' % (accuracy*100))
print('Erro: %.2f' % (loss))

plotarResultados(listAcc,'Model accuracy', 'Accuracy', 'Epoch')
plotarResultados(listLoss,'Model loss', 'Loss', 'Epoch')

"""PREDIÇÕES"""

predictions = model.predict_classes(Xbase)
# summarize the first 5 cases
for i in range(len(Xbase)):
	print('%s => %d (expected %d)' % (Xbase[i].tolist(), predictions[i], Ybase[i]))

"""ANALISE"""

positive = 0;
negative = 0;

totaldados = len(Xtotal) #Total de linhas do csv
print ("Total de dados:", totaldados)

for i in range(len(Ytotal)):
  if(Ytotal[i])==1:
    positive+=1
  else:
    negative+=1

print('Positivo', positive, positive/len(Ytotal))
print('Negativo', negative, negative/len(Ytotal))

count = [0]*9 #Criação do vetor para armazenar a quantidade de vezes que o numero aparece na posição
totalsoma = 0 #Somar todas os valores do count

for coluna in range(9):
  for linha in range(totaldados):
    result = ((Xtotal[linha][coluna])==1 and Ytotal[linha]==1) #Se a posição for X e o resultado positivo
    count[coluna]=(count[coluna]+result)

for i in range(9):
  totalsoma+=count[i]

print('Total soma', totalsoma)

print (count[0], count[1], count[2], "------>", count[0]/totalsoma, count[1]/totalsoma, count[2]/totalsoma)
print (count[3], count[4], count[5], "------>", count[3]/totalsoma, count[4]/totalsoma, count[5]/totalsoma)
print (count[6], count[7], count[8], "------>", count[6]/totalsoma, count[7]/totalsoma, count[8]/totalsoma)

"""GRAFICO"""

posicoes = ['TL', 'TM', 'TR', 'ML', 'MM', 'MR', 'BL', 'BM', 'BR']

plt.bar(posicoes, count, color="red")
plt.xticks(posicoes)
plt.ylabel('Quantidade de ocorrências')
plt.xlabel('Posições')
plt.title('Posições X Quantidade de ocorrências')
plt.show()