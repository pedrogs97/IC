# -*- coding: utf-8 -*-
"""Copy  03TicTac.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C9qGY3VMLXE82d7vNpFiAbeJlP2GdIru

# Atividade 26/03/2020

No repositorio https://archive.ics.uci.edu/ml/ existem muitas bases de dados para Machine Learning.

A atividade é configurar uma MLP com keras tensorflow para resolver no minimo 2 problemas desta base de dados.
 - Não pode ser a "iris_dataset".
 - Não pode ter muitas bases escolhida por voces de forma repetida. (ou seja se aluno A escolheu o problema x e y, o aluno B deve evitar pegar o problema x e y)

## Extra

Utilize estatísticas se possível na base de dados, tente "desvendar o que ela significa" utilize não somente as informações no site como tambem visalize os dados.

# Alunos
 -  Aluno: \<nome aqui\>
"""

import pandas as pd
import numpy as np
from numpy import loadtxt
import tensorflow as tf

"""CATEGORIZANDO OS DADOS DE SAIDA"""

numpydados = loadtxt('tic-tac-toe.csv', delimiter=",")

X = numpydados[:,0:9] #Valores de entrada
Y = numpydados[:,9] #Valores de saida

print (X)
print (Y)

model = tf.keras.Sequential([
    tf.keras.layers.Dense(12, input_dim=9, activation=tf.nn.sigmoid),
    tf.keras.layers.Dense(4, activation=tf.nn.sigmoid),
    tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)
])

"""KERAS"""

model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.12),
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.fit(X, Y, epochs=200) #Treinamento

_, accuracy = model.evaluate(X, Y)
print('Accuracy: %.2f' % (accuracy*100))

"""PREDIÇÕES"""

predictions = model.predict_classes(X)
# summarize the first 5 cases
for i in range(len(Y)):
	print('%s => %d (expected %d)' % (X[i].tolist(), predictions[i], Y[i]))

"""ANALISE"""

totaldados = len(X) #Total de linhas do csv
count = [0]*9 #Criação do vetor para armazenar a quantidade de vezes que o numero aparece na posição
totalsoma = 0 #Somar todas os valores do count


print ("Total de dados:", totaldados)

for colum in range(9):
  for countcolum in range(totaldados):
    result = ((X[countcolum][colum])==1 and Y[countcolum]==1) #Se a posição for X e o resultado positivo
    count[colum]=(count[colum]+result)

for i in range(9):
  totalsoma+=count[i]

print (count[0], count[1], count[2], "------>", count[0]/totalsoma, count[1]/totalsoma, count[2]/totalsoma)
print (count[3], count[4], count[5], "------>", count[3]/totalsoma, count[4]/totalsoma, count[5]/totalsoma)
print (count[6], count[7], count[8], "------>", count[6]/totalsoma, count[7]/totalsoma, count[8]/totalsoma)